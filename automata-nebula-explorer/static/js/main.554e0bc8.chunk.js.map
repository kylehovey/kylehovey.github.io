{"version":3,"sources":["lib/ca.js","components/input/ruleInput.js","components/terra/terrarium.js","components/charts/umapSelect.js","App.js","serviceWorker.js","index.js"],"names":["maxRuleNumber","ruleFor","ruleNumber","neighbors","alive","bit","nameForRule","rule","out","neighborCount","toString","nameForRuleNumber","register","getInitialProbability","type","window","terra","registerCA","colorFn","this","color","process","x","y","filter","creature","length","Math","random","RuleInput","onChange","methods","countButtons","isBirth","Array","fill","map","_","selected","className","onClick","toggleBit","key","Terrarium","width","height","cellSize","onComplexityChange","initialProbability","useState","board","setBoard","started","setStarted","initialProbabilityRef","useRef","complexity","withBoard","name","fn","grid","makeGrid","draw","resetComplexity","updateComplexity","animate","stop","current","canvas","toBlob","size","document","getElementById","useEffect","id","trails","background","periodic","appendChild","randomize","pause","toggleButton","step","disabled","UMAPSelect","embedding","neighborDist","pointSize","alpha","relativeTop","relativeLeft","setCanvas","backboard","setBackboard","$","truths","method","every","t","undefined","context","getContext","extrema","useMemo","reduce","l","r","b","loc","sign","Infinity","metric","u","v","sqrt","pointsWithin","range","abs","closestPointTo","bestLoc","bestRest","hereLoc","hereRest","dataForRule","find","asImageSpace","left","right","bottom","imageWidth","imageHeight","pixels","units","clientX","clientY","getBoundingClientRect","userClicked","top","imageClicked","onImageClick","imageFound","radius","asImageDistance","neighborhood","asUserSpace","drawSelected","colorFor","_alpha","dandelion","burgundy","s","val","i","R","G","B","clearRect","drawPoint","target","targetContext","fillStyle","lineWidth","beginPath","arc","PI","strokeStyle","moveTo","lineTo","stroke","minDiff","diff","userLoc","clearCanvas","drawCrosshairsAt","drawCircleAbout","found","onRuleSelect","clearBackboard","drawNebula","baseStyle","position","style","zIndex","ref","onCanvasClick","backgroundColor","unWrapNumeric","value","parseInt","isNaN","App","setRuleNumber","setNeighborhood","setInitialProbability","randomizeRule","setRuleState","UMAPEmbedding","onRuleNumberChange","onInitialProbabilityChange","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.554e0bc8.chunk.js","sourcesContent":["/**\n * Cool Rules\n * 39947 - B013/S1236 - Resolves into a maze pattern\n * 123897 - B0345678/S04567 - Creates dungeon-like structures\n * 28062 - B123478/S1245 - Patterns of static like prison linking books\n * 48269 - B0237/S12346 - Makes mazes like the Inception logo\n * 117046 - B12458/S2567 - Kind of looks like water ripples\n * 237033 - B035678/S123678 - Promising complexity curve, fills the board with live cells\n * 249166 - B12368/S125678 - Quickly fills the board with live cells, has oscillators\n * 201624 - B3478/0378 - Proceeds almost like Game of Life\n * 108584 - B35/S2467 - Looks like Day and Night\n * 233916 - B234578/S3678 - Looks like Day and Night, but inverted (closest to 108584)\n * 107112 - B356/S0467 - Vanishing rule that looks like Day and Night or Game of Life\n */\n\nexport const maxRuleNumber = 2**18 - 1;\n\n/**\n * A rule number is a bit-map of birth and survival rules\n * in a life-like CA rule definition. For instance,\n * the Game of Life (B3/S23) would be:\n * 0b000001100000001000 = 6152\n *   ||||||||||||||||||\n *   876543210876543210\n *   ||||||||||||||||||\n *   SSSSSSSSSBBBBBBBBB\n */\nexport const ruleFor = (ruleNumber) => (neighbors, alive) => {\n  if (alive) {\n    for (let bit = 9; bit < 18; ++bit) {\n      const mask = 1 << bit;\n      const neighborCount = bit - 9;\n      const cares = (mask & ruleNumber) !== 0;\n\n      if (cares && neighbors === neighborCount) return true;\n    }\n  } else {\n    for (let bit = 0; bit < 9; ++bit) {\n      const mask = 1 << bit;\n      const neighborCount = bit;\n      const cares = (mask & ruleNumber) !== 0;\n\n      if (cares && neighbors === neighborCount) return true;\n    }\n  }\n\n  return false;\n};\n\nexport const nameForRule = (rule) => {\n  let out = \"B\";\n\n  for (let neighborCount = 0; neighborCount < 9; ++neighborCount) {\n    if (rule(neighborCount, false)) out += neighborCount.toString();\n  }\n\n  out += \"/S\";\n\n  for (let neighborCount = 0; neighborCount < 9; ++neighborCount) {\n    if (rule(neighborCount, true)) out += neighborCount.toString();\n  }\n\n  return out;\n}\n\nexport const nameForRuleNumber = (ruleNumber) => nameForRule(ruleFor(ruleNumber));\n\nexport const register = (ruleNumber, getInitialProbability = () => 0.5) => {\n  const rule = ruleFor(ruleNumber);\n  const type = nameForRule(rule);\n\n  window.terra.registerCA({\n    type,\n    colorFn() {\n      return this.alive ? this.color + ',1' : '0,0,0,0';\n    },\n    process(neighbors, x, y) {\n      const neighborCount = neighbors\n        .filter(({ creature }) => creature.alive)\n        .length;\n\n      this.alive = rule(neighborCount, this.alive);\n\n      return true;\n    },\n  }, function() {\n    this.alive = Math.random() < getInitialProbability();\n  });\n\n  return type;\n};\n","import React, { useState, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { ruleFor } from '../../lib/ca';\n\nconst RuleInput = ({\n  ruleNumber = 0,\n  onChange = () => {},\n} = {}) => {\n  const rule = ruleFor(ruleNumber);\n\n  const methods = {\n    countButtons(isBirth) {\n      return Array(9).fill().map(\n        (_, neighbors) =>  {\n          const selected = rule(neighbors, !isBirth) ? ' selected' : '';\n\n          return (\n            <td\n              className={`bit-button${selected}`}\n              onClick={() => methods.toggleBit(neighbors, isBirth)}\n              key={`${isBirth ? 'B' : 'S'}-${neighbors}`}\n            >\n              {neighbors}\n            </td>\n          )\n        }\n      );\n    },\n    toggleBit(neighbors, isBirth) {\n      const mask = 1 << neighbors + (isBirth ? 0 : 9);\n      onChange(ruleNumber ^ mask);\n    },\n  };\n\n  return (\n    <div className=\"rule-input\">\n      <table>\n        <tbody>\n          <tr>\n            <td className=\"label\">B:</td>\n            {methods.countButtons(true)}\n          </tr>\n          <tr>\n            <td className=\"label\">S:</td>\n            {methods.countButtons(false)}\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  )\n};\n\nRuleInput.propTypes = {\n  ruleNumber: PropTypes.number,\n  onChange: PropTypes.func,\n};\n\nexport default RuleInput;\n","import React, { useState, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { register, nameForRuleNumber } from '../../lib/ca';\n\n// TODO: Allow for more than one (id)\nconst Terrarium = ({\n  width,\n  height,\n  cellSize,\n  ruleNumber,\n  onComplexityChange = () => {},\n  initialProbability = 50,\n} = {}) => {\n  const [ board, setBoard ] = useState(null);\n  const [ started, setStarted ] = useState(false);\n  const initialProbabilityRef = useRef(initialProbability);\n\n  // Needs to be a ref for Terra animation callback side-effect\n  const complexity = useRef([]);\n\n  const withBoard = name => fn => ({\n    [name](...args) {\n      if (board === null) return;\n      return fn(...args);\n    },\n  });\n\n  const methods = {\n    ...withBoard`randomize`(() => {\n      board.grid = board.makeGrid(nameForRuleNumber(ruleNumber));\n      board.draw();\n\n      setStarted(false);\n      setBoard(board);\n      methods.resetComplexity();\n      methods.updateComplexity();\n    }),\n    ...withBoard`animate`(() => board.animate(methods.updateComplexity)),\n    ...withBoard`pause`(() => board.stop()),\n    ...withBoard`step`(() => board.animate(1, methods.updateComplexity)),\n    resetComplexity() {\n      complexity.current = [];\n    },\n    updateComplexity() {\n      methods.canvas.toBlob(\n        ({ size }) => {\n          complexity.current = [...complexity.current, size];\n          onComplexityChange(complexity.current);\n        },\n        'image/png',\n        1,\n      );\n    },\n    get canvas() {\n      return document.getElementById(\"terrarium\");\n    },\n    get toggleButton() {\n      return (\n        <button onClick={() => setStarted(!started)}>\n          {started ? 'Stop' : 'Start'}\n        </button>\n      );\n    },\n  };\n\n  // Initialize the board on mount\n  useEffect(() => {\n    const board = new window.terra.Terrarium(\n      width,\n      height,\n      {\n        id: 'terrarium',\n        cellSize: cellSize,\n        trails: 0,\n        background: [0, 0, 0],\n        periodic: true,\n      }\n    );\n\n    const canvas = document.getElementById('terrarium');\n    document.getElementById('terrarium-container').appendChild(canvas);\n\n    setBoard(board);\n    methods.updateComplexity();\n  }, []);\n\n  useEffect(methods.randomize, [board]);\n\n  // Start and stop the board on started change\n  useEffect(() => {\n    if (started) {\n      methods.animate();\n    } else {\n      methods.pause();\n    }\n  }, [started]);\n\n  useEffect(() => {\n    initialProbabilityRef.current = initialProbability;\n  }, [initialProbability]);\n\n  useEffect(() => {\n    register(ruleNumber, () => initialProbabilityRef.current / 100);\n    methods.randomize();\n  }, [ruleNumber, initialProbability]);\n\n  return (\n    <div className=\"terrarium\">\n      {methods.toggleButton}\n      <button onClick={methods.step} disabled={started}>Step</button>\n      <button onClick={methods.randomize}>Randomize</button>\n      <div id=\"terrarium-container\" />\n    </div>\n  )\n};\n\nTerrarium.propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  cellSize: PropTypes.number.isRequired,\n  ruleNumber: PropTypes.number.isRequired,\n  onComplexityChange: PropTypes.func,\n  initialProbability: PropTypes.number,\n};\n\nexport default Terrarium;\n","import React, { useState, useMemo, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nconst UMAPSelect = ({\n  embedding,\n  ruleNumber,\n  neighborDist = 5,\n  onChange = () => {},\n  width = \"700px\",\n  height = \"700px\",\n  pointSize = 1,\n  alpha = 0.2,\n  relativeTop = 0,\n  relativeLeft = 0,\n} = {}) => {\n  const [ canvas, setCanvas ] = useState(null);\n  const [ backboard, setBackboard ] = useState(null);\n\n  const $ = (...truths) => method => fn => ({\n    [method]: (...args) => truths.every(t => t) ? fn(...args) : undefined,\n  });\n\n  const context = canvas && canvas.getContext(\"2d\");\n  const extrema = useMemo(() => embedding.reduce(\n    ([ l, r, b, t ], { loc: [ x, y ] }) => [\n      x < l ? x : l,\n      x > r ? x : r,\n      y < b ? y : b,\n      y > t ? y : t,\n    ],\n    [ 1, -1, 1, -1 ].map(sign => sign * Infinity),\n  ), [embedding]);\n\n  const methods = {\n    metric([ x, y ], [ u, v ]) {\n      return Math.sqrt((x - u)**2 + (y - v)**2);\n    },\n    pointsWithin(range, [ x, y ]) {\n      return embedding.filter(\n        ({ loc: [ u, v ] }) => (\n          Math.abs(x - u) < range && Math.abs(y - v) < range\n        ),\n      );\n    },\n    closestPointTo(loc) {\n      return embedding.reduce(\n        (\n          { loc: bestLoc, ...bestRest },\n          { loc: hereLoc, ...hereRest },\n        ) => methods.metric(hereLoc, loc) < methods.metric(bestLoc, loc)\n          ? { loc: hereLoc, ...hereRest }\n          : { loc: bestLoc, ...bestRest },\n        { loc: [ Infinity, Infinity ] },\n      );\n    },\n    dataForRule(ruleNumber) {\n      return embedding.find(({ rule }) => rule === ruleNumber);\n    },\n    asImageSpace([ x, y ]) {\n      const [ left, right, bottom, top ] = extrema;\n      const imageWidth = right - left;\n      const imageHeight = top - bottom;\n      const userWidth = backboard.width;\n      const userHeight = backboard.height;\n\n      return [\n        left + (x / userWidth) * imageWidth,\n        bottom + imageHeight * (1 - y / userHeight),\n      ];\n    },\n    ...$(backboard)`asUserSpace`(([ u, v ]) => {\n      const [ left, right, bottom, top ] = extrema;\n      const imageWidth = right - left;\n      const imageHeight = top - bottom;\n      const userWidth = backboard.width;\n      const userHeight = backboard.height;\n\n      return [\n        userWidth * ((u - left) / imageWidth),\n        userHeight * (1 - ((v - bottom) / imageHeight)),\n      ];\n    }),\n    ...$(backboard)`asImageDistance`((pixels) => {\n      const [ left, right ] = extrema;\n      const imageWidth = right - left;\n      const userWidth = backboard.width;\n\n      return pixels * imageWidth / userWidth;\n    }),\n    ...$(backboard)`asUserDistance`((units) => {\n      const [ left, right ] = extrema;\n      const imageWidth = right - left;\n      const userWidth = backboard.width;\n\n      return units * userWidth / imageWidth;\n    }),\n    ...$(backboard)`onCanvasClick`(({ clientX, clientY }) => {\n      const { left, top } = backboard.getBoundingClientRect();\n      const userClicked = [ clientX - left, clientY - top ];\n      const imageClicked = methods.asImageSpace(userClicked);\n\n      methods.onImageClick(imageClicked);\n    }),\n    onImageClick(loc) {\n      const { rule, loc: imageFound } = methods.closestPointTo(loc);\n      const radius = methods.asImageDistance(neighborDist); const neighborhood = methods.pointsWithin(radius, imageFound);\n      const userFound = methods.asUserSpace(imageFound);\n\n      methods.drawSelected(loc);\n\n      onChange({ rule, neighborhood });\n    },\n    colorFor(t, _alpha = 1) {\n      const dandelion = [ 242, 235, 65 ];\n      const burgundy = [ 255, 0, 0 ];\n      const s = 1 - t;\n\n      const [ R, G, B ] = burgundy.map(\n        (val, i) => t * val + s * dandelion[i]\n      );\n\n      return `rgb(${R}, ${G}, ${B}, ${_alpha})`;\n    },\n    ...$(backboard)`clearBackboard`(() => {\n      backboard.getContext(\"2d\").clearRect(\n        0,\n        0,\n        backboard.width,\n        backboard.height\n      );\n    }),\n    ...$(canvas)`clearCanvas`(() => {\n      canvas.getContext(\"2d\").clearRect(\n        0,\n        0,\n        canvas.width,\n        canvas.height\n      );\n    }),\n    drawPoint([ x, y ], color = \"#FFF\", size = 1, target = canvas) {\n      if (target !== null) {\n        const targetContext = target.getContext(\"2d\");\n\n        targetContext.fillStyle = color;\n        targetContext.lineWidth = 2;\n        targetContext.beginPath();\n        targetContext.arc(x, y, size, 0, 2 * Math.PI);\n        targetContext.fill();\n      }\n    },\n    ...$(context)`drawCrosshairsAt`(([ x, y ], color = \"#FFF\", width = 3) => {\n      context.strokeStyle = color;\n      context.beginPath();\n      context.moveTo(x, 0);\n      context.lineTo(x, canvas.height);\n      context.stroke();\n      context.moveTo(0, y);\n      context.lineTo(canvas.width, y);\n      context.stroke();\n    }),\n    ...$(context)`drawCircleAbout`(([ x, y ], color = \"#FFF\", size = 5) => {\n      context.strokeStyle = color;\n      context.beginPath();\n      context.arc(x, y, size, 0, 2 * Math.PI);\n      context.stroke();\n    }),\n    ...$(backboard)`drawNebula`(() => {\n      let minDiff = Infinity;\n\n      for (const { diff } of embedding) {\n        if (diff < minDiff) {\n          minDiff = diff;\n        }\n      }\n\n      for (const { loc, diff } of embedding) {\n        methods.drawPoint(\n          methods.asUserSpace(loc),\n          methods.colorFor(Math.abs(diff) / Math.abs(minDiff), alpha),\n          pointSize,\n          backboard,\n        );\n      }\n    }),\n    ...$(backboard, canvas)`drawSelected`((loc) => {\n      const userLoc = methods.asUserSpace(loc);\n\n      methods.clearCanvas();\n      methods.drawCrosshairsAt(userLoc);\n      methods.drawCircleAbout(userLoc, \"skyblue\");\n    }),\n    ...$(backboard, canvas)`onRuleSelect`((ruleNumber) => {\n      const found = methods.dataForRule(ruleNumber);\n\n      if (found) {\n        const { loc } = found;\n\n        methods.onImageClick(loc);\n      }\n    }),\n  };\n\n  useEffect(() => methods.onRuleSelect(ruleNumber), [ruleNumber]);\n  useEffect(() => {\n    methods.clearBackboard();\n    methods.drawNebula();\n    methods.onRuleSelect(ruleNumber);\n  }, [backboard, embedding]);\n\n  const baseStyle = {\n    position: \"absolute\",\n    top: relativeTop,\n    left: relativeLeft,\n  };\n\n  return (\n    <div className=\"umap-select\">\n      <canvas\n        style={{ ...baseStyle, zIndex: 1 }}\n        width={width}\n        height={height}\n        ref={setCanvas}\n        onClick={methods.onCanvasClick}\n      />\n      <canvas\n        style={{ ...baseStyle, backgroundColor: \"black\", zIndex: 0 }}\n        width={width}\n        height={height}\n        ref={setBackboard}\n      />\n    </div>\n  );\n};\n\nUMAPSelect.propTypes = {\n  embedding: PropTypes.arrayOf(PropTypes.object),\n  ruleNumber: PropTypes.number.isRequired,\n  neighborDist: PropTypes.number,\n  onChange: PropTypes.func,\n  width: PropTypes.string,\n  height: PropTypes.string,\n  relativeTop: PropTypes.string,\n  relativeLeft: PropTypes.string,\n};\n\nexport default UMAPSelect;\n","import React, { useState } from 'react';\nimport '../node_modules/react-vis/dist/style.css';\nimport './App.css';\n\nimport { maxRuleNumber, nameForRuleNumber } from './lib/ca';\n\nimport RuleInput from './components/input/ruleInput';\nimport Terrarium from './components/terra/terrarium';\nimport UMAPSelect from './components/charts/umapSelect';\n\nimport rule667 from './data/667.json';\nimport UMAPEmbedding from './data/embedding.json';\n\nconst unWrapNumeric = method => fn => ({\n  [method]: ({ target }) => {\n    const value = parseInt(target.value, 10);\n\n    if (isNaN(value)) {\n      fn(0);\n    } else {\n      fn(value);\n    }\n  }\n});\n\nconst App = () => {\n  const [ ruleNumber, setRuleNumber ] = useState(6152);\n  const [ neighborhood, setNeighborhood ] = useState([]);\n  const [ initialProbability, setInitialProbability ] = useState(50);\n\n  const methods = {\n    randomizeRule() {\n      setRuleNumber(parseInt(Math.random() * maxRuleNumber, 10));\n    },\n    setRuleState({ rule, neighborhood }) {\n      setRuleNumber(rule);\n      setNeighborhood(neighborhood);\n    },\n    ...unWrapNumeric`onInitialProbabilityChange`(setInitialProbability),\n    ...unWrapNumeric`onRuleNumberChange`((ruleNumber) => {\n      if (ruleNumber < 0) {\n        setRuleNumber(0);\n      } else if (ruleNumber > maxRuleNumber) {\n        setRuleNumber(maxRuleNumber);\n      } else {\n        setRuleNumber(ruleNumber);\n      }\n    }),\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"column full\">\n          <h1>UMAP Embedding of Life-Like CA - Data Explorer</h1>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"column third\">\n          <UMAPSelect\n            width=\"400px\"\n            height=\"400px\"\n            embedding={UMAPEmbedding}\n            ruleNumber={ruleNumber}\n            onChange={methods.setRuleState}\n            relativeLeft=\"6%\"\n            relativeTop=\"30px\"\n          />\n        </div>\n        <div className=\"column third\">\n          <div className=\"label-container\">\n            <div className=\"row\">\n              Rule Number: <input\n                value={ruleNumber === 0 ? '' : ruleNumber}\n                onChange={methods.onRuleNumberChange}\n                style={{ width: \"50px\" }}\n              />\n            </div>\n            <div className=\"row\">\n              Canonical Name: <span className=\"thicc\">\n                {nameForRuleNumber(ruleNumber)}\n              </span>\n            </div>\n          </div>\n          <RuleInput ruleNumber={ruleNumber} onChange={setRuleNumber} />\n          <button className=\"chungus\" onClick={methods.randomizeRule}>\n            Random Rule\n          </button>\n          <UMAPSelect\n            width=\"300px\"\n            height=\"300px\"\n            embedding={neighborhood}\n            ruleNumber={ruleNumber}\n            onChange={({ rule }) => setRuleNumber(rule)}\n            pointSize={3}\n            alpha={1}\n            relativeLeft=\"16%\"\n            relativeTop=\"20px\"\n          />\n        </div>\n        <div className=\"column third\">\n          <Terrarium\n            width={100}\n            height={100}\n            cellSize={4}\n            ruleNumber={ruleNumber}\n            initialProbability={initialProbability}\n          />\n          <div className=\"label-container\">\n            <div className=\"row\">\n              Initial probability of cell life: <input\n                style={{ width: \"20px\" }}\n                value={initialProbability === 0 ? '' : initialProbability}\n                onChange={methods.onInitialProbabilityChange}\n              />\n              <span>%</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}