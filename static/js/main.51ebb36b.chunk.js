(this.webpackJsonprelto=this.webpackJsonprelto||[]).push([[0],{15:function(e,t,a){},21:function(e,t,a){},23:function(e,t,a){"use strict";a.r(t);var i,n=a(2),r=a.n(n),o=a(9),s=a.n(o),l=(a(15),a(10)),c=a(8),d=(a(21),a(5)),h=a(3),u=a.p+"static/media/cal_sim.096fbaaa.png",m=a.p+"static/media/myst_net.3d483c15.png",p=a.p+"static/media/fireplace.666863e6.png",f=a.p+"static/media/euler_golf.97985e54.png",g=a.p+"static/media/shader_toy.653447ee.png",b=a.p+"static/media/vector_wind.959ff545.png",y=a.p+"static/media/fiery_furnace.a895fac0.png",w=a.p+"static/media/8_bit_spaghetti.21c0142a.png",j=a.p+"static/media/acoustic-forest.763c83a8.png",v=a.p+"static/media/station_analysis.940da932.png",x=a.p+"static/media/villein_translator.fc9395a9.png",k=a.p+"static/media/automata_exploration.5fdd3069.png",I=[{title:"Automata Browser",icon:h.c,image:k,year:"2020",brief:"Global map of all life-like Cellular Automata",description:"I was researching emergent complexity in cellular automata and found a classification scheme for all quarter million life-like automata. The embedding compresses all of the rules into a nebula of points where distance between any two points provides a decent approximation of how simililarly the rules behave given a random initial board state. I built this browser with React so that I could better explore the dataset.",link:"/automata-nebula-explorer/index.html"},{title:"Fiery Furnace",icon:h.f,image:y,year:"2020",brief:"Interactive map of the Fiery Furnace in Arches National Park",description:"Pre-pandemic, my partner Hannah and I took a trip down to Arches National Park in Utah. The highlight was exploring the Fiery Furnace: a labrynth of ancient sandstone with no main trail, only meandering boulder routes and washes. I exported the route data (recorded with my watch) and interpolated photo time-stamps with location time-stamps to create an interactive map of our path with pictures along the way using Mapbox.",link:"/FieryFurnace/index.html"},{title:"Shader Toy",icon:h.d,image:g,year:"2020",brief:"Various shaders written by me",description:"I have been having a lot of fun learning how to write shaders. GLSL seemed like an intimidating topic at first, but once I realized it was essentially a very parrellized graphing calculator I started having a lot of fun and have been picking up some more techniques. As of writing this, I have worked with Ray Marching, Conformal Mapping, and 2D interference patterns.",link:"https://www.shadertoy.com/user/kylehovey"},{title:"Myst Net",icon:h.h,image:m,year:"2019",brief:"Neural Net for parsing D'ni numerals",description:"This was my last hackathon project. The D'ni numeral system is from the world of Myst, a game series that I am a very large fan of. The system is base-25, and has a rotational glyph system with a base-5 sub-pattern. I wanted to see if I could reproduce the MNIST convnet example using D'ni numbers. To generate training data, I wrote the segments in isolation and created a script to produce combinatorial sets of the individual segments I created. In the end, the network had over 99% validation accuracy and responded well to novel handwritten D'ni digits.",link:"https://github.com/kylehovey/myst-net"},{title:"Vector Wind",icon:h.l,image:b,year:"2017",brief:"Vector field visualization tool",description:"I was inspired by a Reddit post that used HTML Canvas to create a beautiful vector field visualization. Unfortunately, the poster did not release their source code, so I decided to make my own version. Vector fields are entered by typing in a Javascript function that takes two inputs (x,y) and returns a two-element array. The result is visualized by creating particles that get pushed around in the field like dust in the wind. The source code can be found on my GitHub.",link:"vectorwind/index.html"},{title:"CALSim",icon:h.k,image:u,year:"2016",brief:"In-browser WireWorld cellular automata simulator",description:"This is a WireWorld Cellular Automata simulator written in JavaScript. WireWorld is a CA capable of logic simulation. In fact, it is Turing Complete! This in-browser interpreter allows you to create structures, copy, paste, delete, and pause/play/step simulations.",link:"CALSim/index.html"},(i={title:"Villein Translator",icon:h.a,image:x,year:"2016"},Object(d.a)(i,"year","2016"),Object(d.a)(i,"brief","Translator for Obduction's Villein numbers"),Object(d.a)(i,"description",'In Cyan\'s new game Obduction there is an alien race called the Villeins. Part of the game is figuring out their numbering system, which uses a three-by-three grid on which five "digits" can lie. The whole system is base-4, and I had a bunch of fun figuring it out. I wanted to create a translator to quickly verify numbers, so I made one husing the html5 canvas.'),Object(d.a)(i,"link","Villein/index.html"),i),{title:"Euler Golf",icon:h.j,image:f,year:"2015",brief:"Recursive puzzle involving complex numbers",description:"When I was attending Cuesta College in San Luis Obispo, I had an idea for a game over the Gaussian Integers (complex numbers of the form a+bi where a and b are both integers). I quickly found that the game was evil in difficulty, and as I shared it with friends I also learned that it was not just me. In light of this newfound challenge, I created an in-browser version as a Hackathon project. More info can be found on the site.",link:"EulerGolf/index.html"},{title:"Station Report",icon:h.b,image:v,year:"2018",brief:"Analysis to find the best spots for new EV chargers",description:"In Utah, where the air is bad enough each winter to take years off of the average person's life expectancy, electric vehicle adoption is one of the many solutions to our air quality. At the Utah Power and Electronics Lab (UPEL), I helped Rocky Mountain Power determine where to place/fund new electric vehicle charging stations in Utah. We worked with the Utah Department of Transportation to combine traffic information, as well as network analysis on the roadways to find the locations that would have the highest impact for EV adoption. This interactive report summarizes the findings of the analysis and visualizes what corridors are affected.",link:"stationReport/index.html"},{title:"8-Bit Spaghetti",icon:h.g,image:w,year:"2012",brief:"8-Bit Computer designed from the ground up",description:'One fateful night of playing Minecraft with my best friend and I was convinced that I had to learn more about the inner workings of a CPU. We had just installed a mod that added basic digital components to the game, and my friend was constructing a processor. I knew nothing about architecture at that point, but I wanted to learn more. I began my journey reading "Digitial Computer Electronics" by Malvino and started constructing the basic modular components of a computer. Eventually I had constructed a processor of my own design. The final product had EM interference which induced signalling issues, but the knowledge I gained benefits me to this day. I made a website and tutorial to aid anyone who wishes to acheive the same goal. I know of a few individuals so far that have used my instructions to build their own CPU.',link:"http://8-bitspaghetti.com"},{title:"Fireplace",icon:h.e,image:p,year:"2016",brief:"Custom simulator written to mimic a campfire",description:"One of my favorite things to do in my free time is to program new patterns for the Adafruit Neopixel shield (a 5x8 RGB LED matrix for the Arduino). Since I camp a lot, I wanted to simulate fire on it with the hopes of creating a calming lantern for my tent. I decided to go with a slightly neural-network inspired approach. I created an ember class that has an internal fire value and a customized sigmoid curve function that will map the embers' fire values to something between 0 and 1. A stoke method adds a random integer in a specified range, and a diminish method multiplies the fire variable by a predetermined constant (0<k<1). I was so happy with the results that I wanted to create an in-browser version. This time, I used HTML5 and JS to create a grid of embers. I shaped the fire on the page by making the range for the random constant that each ember is stoked with depend on the ember's position on the page. Vertically there is a linear gradient, and horizontally there is a gaussian distribution determined by page width.",link:"FirePlace/index.html"},{title:"Acoustic Forest",icon:h.i,image:j,year:"2016",brief:"2D Procedural landscape that is reactive to sound",description:"A natural continuation of my FirePlace project and an ode to John Muir and the mountains, I created Acoustic Forest: a music visualizer that uses procedurally generated terrain with unique elements augmented by distinct frequency bands in a song. I decided to go with Muse's \"Exogenesis Symphony Part 3\" which I claim absolutely no rights to and will take down at first request of any proprietor's request. I chose the song because it just so happened that Muse's masterful composition consists of a crescendo of increasing layers of elements, then a decrescendo back out. The structure of the song itself is a mountain in shape, which made it perfect to bring in elements slowly, then bring them out in reverse order. Currently this only runs in Chrome/Safari for desktop, so apologies to mobile users. Granted, this was created in Canvas without WebGL, so expect heavy processor usage.",link:"AcousticForest/index.html"}];function O(){return(O=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var i in a)Object.prototype.hasOwnProperty.call(a,i)&&(e[i]=a[i])}return e}).apply(this,arguments)}function N(e,t){if(null==e)return{};var a,i,n=function(e,t){if(null==e)return{};var a,i,n={},r=Object.keys(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var C=n.createElement("defs",null,n.createElement("style",null,"\n      .a {\n        fill: #fbf1c7;\n      }\n    ")),M=n.createElement("path",{className:"a",d:"M127.5,80.8a9.2,9.2,0,0,1,0,13,9.3,9.3,0,0,1-13.1,0L83.7,63.1,53.1,93.8a9.3,9.3,0,0,1-13.1,0,9.2,9.2,0,0,1,0-13L77.1,43.7a9.5,9.5,0,0,1,13.3,0ZM53.1,52.9,83.7,22.2l30.7,30.7a9.3,9.3,0,0,0,13.1-13.1L90.4,2.7a9.5,9.5,0,0,0-13.3,0L40,39.8A9.3,9.3,0,0,0,53.1,52.9ZM181.9,184.4h0a9.6,9.6,0,0,1-5.3,1.6H9.2A9.3,9.3,0,0,1,0,176.7H0V9.2A9.2,9.2,0,0,1,9.2,0a9.2,9.2,0,0,1,9.3,9.2V167.5H98.4l34-51.3a8.8,8.8,0,0,1,4.2-3.4h.2l.6-.2h5.3l.7.2h.1a9.5,9.5,0,0,1,4.3,3.4l36.7,55.4A9.3,9.3,0,0,1,181.9,184.4Zm-61.3-16.9h38.9l-19.4-29.4Z"});function T(e,t){var a=e.title,i=e.titleId,r=N(e,["title","titleId"]);return n.createElement("svg",O({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 186.7 186",ref:t,"aria-labelledby":i},r),a?n.createElement("title",{id:i},a):null,C,M)}var A=n.forwardRef(T),S=(a.p,a(0));var E=function(){var e=Object(n.useState)(null),t=Object(l.a)(e,2),a=t[0],i=t[1],r={handleClick:function(e){return function(t){return t.preventDefault(),i(e),!1}},get description(){if(null===a)return null;var e=I[a],t=e.title,n=e.description,r=e.link,o=e.icon,s=e.image;return Object(S.jsxs)("div",{className:"details",children:[Object(S.jsx)("button",{onClick:function(){return i(null)},children:"\u21d0"}),Object(S.jsxs)("div",{className:"focused-title-section",children:[Object(S.jsx)("h3",{children:t}),Object(S.jsx)(c.a,{icon:o})]}),Object(S.jsx)("p",{children:n}),Object(S.jsx)("a",{href:r,rel:"noreferrer",target:"_blank",children:"(Link)"}),Object(S.jsx)("div",{className:"project-image-container",children:Object(S.jsx)("img",{src:s})})]})},get projects(){if(null!==a)return null;var e=I.map((function(e,t){var a=e.title,i=e.icon,n=e.brief;return Object(S.jsx)("li",{children:Object(S.jsxs)("a",{href:"#",onClick:r.handleClick(t),children:[Object(S.jsxs)("div",{className:"title-section",children:[Object(S.jsx)(c.a,{icon:i}),Object(S.jsx)("span",{className:"title",children:a})]}),Object(S.jsx)("span",{className:"brief",children:n})]})},"project-".concat(t))}));return Object(S.jsx)("ul",{className:"projects-list",children:e})},get bottomBar(){return Object(S.jsxs)("div",{className:"bottom-bar",children:[Object(S.jsxs)("ul",{className:"soc",children:[Object(S.jsxs)("li",{children:[Object(S.jsx)("a",{className:"soc-linkedin",target:"_blank",href:"http://linkedin.com/in/kyle-hovey",rel:"noreferrer"})," "]})," ",Object(S.jsx)("li",{children:Object(S.jsx)("a",{className:"soc-github soc-icon-last",target:"_blank",href:"http://github.com/kylehovey",rel:"noreferrer"})})]}),Object(S.jsxs)("div",{className:"links",children:[Object(S.jsx)("a",{href:"https://github.com/kylehovey/resume/raw/master/kyle_hovey_resume.pdf",children:"Resume"}),Object(S.jsx)("span",{className:"divider",children:"|"}),Object(S.jsx)("a",{href:"blog",children:"Blog"}),Object(S.jsx)("span",{className:"divider",children:"|"}),Object(S.jsx)("a",{href:"MATH_5620",children:"Math 5620"})]}),Object(S.jsxs)("div",{className:"attribution",children:["Inspired by ",Object(S.jsx)("a",{href:"https://github.com/autophagy/hraew",children:"Hraew"})]})]})},get intro(){return null!==a?null:Object(S.jsxs)("div",{children:[Object(S.jsx)("h2",{children:"Project Portfolio"}),Object(S.jsx)("p",{children:"Hi! My name is Kyle. I grew up in a small community in the Sierra Nevada mountains. In 2019, I graduated Utah State University with a BS in Computational Mathematics. My passions include mathematics, electrical engineering, programming, music, hiking, climbing, and philosophy. Here you can see some highlights from my past/current projects. Check out my blog for diatribes on math and programming."})]})}};return Object(S.jsx)("div",{className:"container",children:Object(S.jsx)("div",{className:"content",children:Object(S.jsxs)("div",{className:"main",children:[Object(S.jsxs)("div",{className:"description",children:[Object(S.jsx)(A,{className:"logo"}),r.intro]}),r.projects,r.description,r.bottomBar]})})})};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));s.a.render(Object(S.jsx)(r.a.StrictMode,{children:Object(S.jsx)(E,{})}),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()})).catch((function(e){console.error(e.message)}))}},[[23,1,2]]]);
//# sourceMappingURL=main.51ebb36b.chunk.js.map